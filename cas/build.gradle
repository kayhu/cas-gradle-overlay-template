apply plugin: 'org.springframework.boot'
apply from: 'http://dl.bintray.com/scalding/generic/waroverlay.gradle'
apply from: 'https://raw.githubusercontent.com/apereo/cas/5.1.x/gradle/overrides.gradle'

apply plugin: 'eclipse'
apply plugin: 'idea'

eclipse {
    classpath {
       downloadSources = true
       downloadJavadoc = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}


bootRepackage {
    enabled = false
}

springBoot  {
    mainClass = "org.springframework.boot.loader.WarLauncher"
}

bootRun {
    addResources = true
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
}

dependencies {
    compile "org.apereo.cas:cas-server-webapp-tomcat:${project.'cas.version'}@war"
    compile "org.apereo.cas:cas-server-support-jdbc:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-support-redis-ticket-registry:${project.'cas.version'}"
    compile "org.apereo.cas:cas-server-support-jpa-service-registry:${project.'cas.version'}"
    compile "mysql:mysql-connector-java:5.1.44"

    providedCompile "org.apereo.cas:cas-server-core:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-core-monitor:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-core-authentication:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-core-services:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-core-logout:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-core-audit:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-core-logging:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-core-tickets:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-core-web:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-core-validation:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-core-util:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-core-events:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-core-events-configuration:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-core-configuration:${project.'cas.version'}"

    providedCompile "org.apereo.cas:cas-server-support-throttle:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-support-configuration:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-support-geolocation:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-support-actions:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-support-cookie:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-support-reports:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-support-themes:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-support-validation:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-support-pm:${project.'cas.version'}"

    providedCompile "org.apereo.cas:cas-server-webapp-config:${project.'cas.version'}"
    providedCompile "org.apereo.cas:cas-server-webapp-init:${project.'cas.version'}"
    providedCompile "javax.servlet:javax.servlet-api:3.1.0"
}

task copyConfig(type: Copy) {
    println "Copying configuration to /etc/cas/config"
    from "${project.rootDir}/etc/cas/config"
    into '/etc/cas/config'
}

war {
    dependsOn copyConfig
    baseName 'cas'
    includeWarJars = true
    entryCompression = ZipEntryCompression.STORED
    manifest {
        from manifestFile()
    }
}

task explodeWar(type: Copy) {
    group = "build"
    description = "Explode the cas.war"
    from zipTree(project.war.outputs.files.singleFile)
    into "${buildDir}/cas"
    doLast {
        println "CAS web application artifact exploded into [cas/build/cas]"
    }
}

File manifestFile() {
    def warfile = configurations.runtime.asFileTree.matching {
        include '**/*.war'
    }
    def manifest = zipTree(warfile.singleFile).matching {
        include '**/*.MF'
    }
    def dst = new File("${project.rootDir}/etc/cas/MANIFEST.MF")
    dst.delete()
    dst << manifest.singleFile.text
    return dst
}

task generateKeys {
  group = 'CAS'
  description = 'generate keys for CAS. These keys can be added to your application.properties file'
  doLast {
    println 'Generating keys for CAS...'
    ['cas.tgc.encryptionKey': 256, 'cas.tgc.signingKey': 512, 'cas.webflow.encryption.key': 96, 'cas.webflow.signing.key': 512].each { key, size ->
        def octetKey = OctJwkGenerator.generateJwk(size)
        def params = octetKey.toParams(JsonWebKey.OutputControlLevel.INCLUDE_SYMMETRIC)
        println "${key}=${params.get('k')}"
    }
  }
}

task run {
    dependsOn build
    doLast{
        javaexec {
            main="-jar";
            jvmArgs = [
                "-Xmx2048M"
                ]
            args = [
                "build/libs/cas.war"
                ]
        }
    }
}

task debug {
    dependsOn build
    doLast {
        javaexec {
            main="-jar";
            jvmArgs = [
                "-Xmx2048M",
                "-XX:+TieredCompilation",
                "-XX:TieredStopAtLevel=1",
                "-Xdebug",
                "-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y",
                "-Dcas.standalone.config.file=D:/code/iakuh/cas-gradle-overlay-template/etc/cas/config/cas.properties"
                ]
            args = [
                "build/libs/cas.war"
                ]

            println "Started ${commandLine}"
        }
    }
}
